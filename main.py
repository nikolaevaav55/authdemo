#!/usr/bin/env python3
"""
–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –¥–ª—è Telegram
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ –≤ Telegram –∫–∞–Ω–∞–ª
"""

import asyncio
import logging
import signal
import sys
from datetime import datetime, timedelta
from typing import Optional
import schedule
import time
from threading import Thread

from config import UPDATE_INTERVAL_HOURS
from news_scraper import LiteratureNewsScraper
from telegram_bot import TelegramNewsBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('literature_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class LiteratureNewsBot:
    def __init__(self):
        self.news_scraper = LiteratureNewsScraper()
        self.telegram_bot = TelegramNewsBot()
        self.is_running = False
        self.last_update = None
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            logger.info("Initializing Literature News Bot...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            if not await self.telegram_bot.test_connection():
                logger.error("Failed to connect to Telegram. Check your bot token and channel ID.")
                return False
            
            logger.info("Bot initialized successfully!")
            return True
            
        except Exception as e:
            logger.error(f"Failed to initialize bot: {str(e)}")
            return False
    
    async def update_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            logger.info("Starting news update...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news_items = await self.news_scraper.get_latest_literature_news()
            logger.info(f"Found {len(news_items)} new literature news items")
            
            if news_items:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª
                success = await self.telegram_bot.send_news_to_channel(news_items)
                
                if success:
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                    self.news_scraper.mark_news_as_sent(news_items)
                    logger.info(f"Successfully sent {len(news_items)} news items to channel")
                else:
                    logger.warning("Some news items failed to send")
            else:
                logger.info("No new literature news found")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
            now = datetime.now()
            if (not self.last_update or 
                self.last_update.date() != now.date()):
                await self.telegram_bot.send_daily_summary(len(news_items))
            
            self.last_update = now
            logger.info("News update completed successfully")
            
        except Exception as e:
            logger.error(f"Error during news update: {str(e)}")
            try:
                await self.telegram_bot.send_status_message(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
                )
            except:
                pass
    
    async def run_update_cycle(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            await self.update_news()
        except Exception as e:
            logger.error(f"Error in update cycle: {str(e)}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é scraper'–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
            await self.news_scraper.close_session()
    
    def schedule_updates(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤
        schedule.every(UPDATE_INTERVAL_HOURS).hours.do(
            lambda: asyncio.create_task(self.run_update_cycle())
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è
        schedule.every().day.at("09:00").do(
            lambda: asyncio.create_task(self.run_update_cycle())
        )
        schedule.every().day.at("15:00").do(
            lambda: asyncio.create_task(self.run_update_cycle())
        )
        schedule.every().day.at("21:00").do(
            lambda: asyncio.create_task(self.run_update_cycle())
        )
        
        logger.info(f"Scheduled updates every {UPDATE_INTERVAL_HOURS} hours and at 09:00, 15:00, 21:00")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            if not await self.initialize():
                return False
            
            self.is_running = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.telegram_bot.send_status_message(
                f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\\!\n\n"
                f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d\\.%m\\.%Y %H:%M:%S')}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: –∫–∞–∂–¥—ã–µ {UPDATE_INTERVAL_HOURS} —á–∞—Å–æ–≤\n"
                f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: RSS –∫–∞–Ω–∞–ª—ã –∏ News API"
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            self.schedule_updates()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
            logger.info("Running initial news update...")
            await self.run_update_cycle()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            scheduler_thread = Thread(target=self.run_scheduler, daemon=True)
            scheduler_thread.start()
            
            logger.info("Bot started successfully! Press Ctrl+C to stop.")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.is_running:
                await asyncio.sleep(1)
            
            return True
            
        except KeyboardInterrupt:
            logger.info("Received interrupt signal, stopping bot...")
            await self.stop()
        except Exception as e:
            logger.error(f"Error starting bot: {str(e)}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            logger.info("Stopping Literature News Bot...")
            self.is_running = False
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é scraper'–∞
            await self.news_scraper.close_session()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            await self.telegram_bot.send_status_message(
                f"üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
                f"üìÖ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%d\\.%m\\.%Y %H:%M:%S')}"
            )
            
            logger.info("Bot stopped successfully")
            
        except Exception as e:
            logger.error(f"Error stopping bot: {str(e)}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"Received signal {signum}, initiating shutdown...")
    # –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å async —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = LiteratureNewsBot()
    
    try:
        success = await bot.start()
        if not success:
            logger.error("Failed to start bot")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("Bot interrupted by user")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        sys.exit(1)
    finally:
        await bot.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
        sys.exit(1)