import asyncio
import logging
from datetime import datetime
from typing import List, Optional
from telegram import Bot
from telegram.error import TelegramError
from telegram.constants import ParseMode

from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID
from news_scraper import NewsItem

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramNewsBot:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN is not set in environment variables")
        if not TELEGRAM_CHANNEL_ID:
            raise ValueError("TELEGRAM_CHANNEL_ID is not set in environment variables")
        
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.channel_id = TELEGRAM_CHANNEL_ID
    
    def format_news_message(self, news_item: NewsItem) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        def escape_markdown(text: str) -> str:
            special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            for char in special_chars:
                text = text.replace(char, f'\\{char}')
            return text
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = escape_markdown(news_item.title)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = ""
        if news_item.description and news_item.description.strip():
            description = escape_markdown(news_item.description[:400])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(news_item.description) > 400:
                description += "\\.\\.\\."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        published_date = news_item.published.strftime("%d\\.%m\\.%Y %H:%M")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        source = escape_markdown(news_item.source)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìö *{title}*\n\n"
        
        if description:
            message += f"{description}\n\n"
        
        message += f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({news_item.url})\n"
        message += f"üìÖ {published_date} \\| üì∞ {source}"
        
        return message
    
    async def send_news_to_channel(self, news_items: List[NewsItem]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª"""
        if not news_items:
            logger.info("No news to send")
            return True
        
        success_count = 0
        
        try:
            for news_item in news_items:
                try:
                    message = self.format_news_message(news_item)
                    
                    await self.bot.send_message(
                        chat_id=self.channel_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN_V2,
                        disable_web_page_preview=False
                    )
                    
                    success_count += 1
                    logger.info(f"Successfully sent news: {news_item.title[:50]}...")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    await asyncio.sleep(1)
                    
                except TelegramError as e:
                    logger.error(f"Failed to send news '{news_item.title[:50]}...': {str(e)}")
                    continue
                except Exception as e:
                    logger.error(f"Unexpected error sending news '{news_item.title[:50]}...': {str(e)}")
                    continue
            
            logger.info(f"Successfully sent {success_count}/{len(news_items)} news items")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Error sending news to channel: {str(e)}")
            return False
    
    async def send_status_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=f"ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n{message}",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info("Status message sent successfully")
        except Exception as e:
            logger.error(f"Failed to send status message: {str(e)}")
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –∫–∞–Ω–∞–ª—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot_info = await self.bot.get_me()
            logger.info(f"Bot connected successfully: @{bot_info.username}")
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = f"üß™ *–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*\n\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω\\!\n–í—Ä–µ–º—è: {datetime.now().strftime('%d\\.%m\\.%Y %H:%M:%S')}"
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=test_message,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
            logger.info("Test message sent successfully")
            return True
            
        except TelegramError as e:
            logger.error(f"Telegram API error: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"Connection test failed: {str(e)}")
            return False
    
    async def send_daily_summary(self, news_count: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
        try:
            current_time = datetime.now().strftime("%d\\.%m\\.%Y")
            message = f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞*\n\n"
            message += f"üìÖ –î–∞—Ç–∞: {current_time}\n"
            message += f"üì∞ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ: {news_count}\n"
            
            if news_count == 0:
                message += f"\nüîç –°–µ–≥–æ–¥–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\."
            else:
                message += f"\n‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ\\!"
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
            logger.info("Daily summary sent successfully")
            
        except Exception as e:
            logger.error(f"Failed to send daily summary: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_telegram_bot():
    try:
        bot = TelegramNewsBot()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if await bot.test_connection():
            print("‚úÖ Telegram bot connection successful!")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
            test_news = NewsItem(
                title="–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ",
                description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.",
                url="https://example.com/test-news",
                published=datetime.now(),
                source="Test Source"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
            success = await bot.send_news_to_channel([test_news])
            if success:
                print("‚úÖ Test news sent successfully!")
            else:
                print("‚ùå Failed to send test news")
        else:
            print("‚ùå Telegram bot connection failed!")
            
    except Exception as e:
        print(f"‚ùå Test failed: {str(e)}")

if __name__ == "__main__":
    asyncio.run(test_telegram_bot())