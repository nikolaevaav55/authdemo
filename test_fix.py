#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ModuleNotFoundError: No module named 'cgi'
"""

import sys
import traceback

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import feedparser
        print(f"‚úÖ feedparser {feedparser.__version__} - OK")
    except Exception as e:
        print(f"‚ùå feedparser - FAILED: {e}")
        return False
    
    try:
        import requests
        print(f"‚úÖ requests {requests.__version__} - OK")
    except Exception as e:
        print(f"‚ùå requests - FAILED: {e}")
        return False
    
    try:
        from bs4 import BeautifulSoup
        print(f"‚úÖ beautifulsoup4 - OK")
    except Exception as e:
        print(f"‚ùå beautifulsoup4 - FAILED: {e}")
        return False
    
    try:
        import aiohttp
        print(f"‚úÖ aiohttp {aiohttp.__version__} - OK")
    except Exception as e:
        print(f"‚ùå aiohttp - FAILED: {e}")
        return False
    
    try:
        import schedule
        print(f"‚úÖ schedule - OK")
    except Exception as e:
        print(f"‚ùå schedule - FAILED: {e}")
        return False
    
    try:
        from dotenv import load_dotenv
        print(f"‚úÖ python-dotenv - OK")
    except Exception as e:
        print(f"‚ùå python-dotenv - FAILED: {e}")
        return False
    
    return True

def test_news_scraper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ news_scraper...")
    
    try:
        from news_scraper import LiteratureNewsScraper, NewsItem
        print("‚úÖ –ò–º–ø–æ—Ä—Ç news_scraper - OK")
        
        scraper = LiteratureNewsScraper()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ LiteratureNewsScraper - OK")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ NewsItem
        from datetime import datetime
        test_item = NewsItem(
            title="Test News",
            description="Test Description",
            url="https://example.com",
            published=datetime.now(),
            source="Test Source"
        )
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ NewsItem - OK")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        test_result = scraper.is_literature_related("This is a book about literature")
        if test_result:
            print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º - OK")
        else:
            print("‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º - FAILED")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå news_scraper - FAILED: {e}")
        traceback.print_exc()
        return False

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ config...")
    
    try:
        from config import LITERATURE_RSS_FEEDS, LITERATURE_KEYWORDS, USER_AGENT
        print("‚úÖ –ò–º–ø–æ—Ä—Ç config - OK")
        
        print(f"‚úÖ RSS –∫–∞–Ω–∞–ª–æ–≤: {len(LITERATURE_RSS_FEEDS)}")
        print(f"‚úÖ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(LITERATURE_KEYWORDS)}")
        print(f"‚úÖ User-Agent –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå config - FAILED: {e}")
        traceback.print_exc()
        return False

def test_rss_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ RSS"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    try:
        from news_scraper import LiteratureNewsScraper
        scraper = LiteratureNewsScraper()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–¥–Ω–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º RSS –∫–∞–Ω–∞–ª–æ–º
        test_feed = 'https://www.theguardian.com/books/rss'
        news_items = scraper.parse_rss_feed(test_feed)
        
        print(f"‚úÖ RSS –ø–∞—Ä—Å–∏–Ω–≥ - OK (–Ω–∞–π–¥–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π)")
        
        if news_items:
            sample = news_items[0]
            print(f"   –ü—Ä–∏–º–µ—Ä: {sample.title[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå RSS –ø–∞—Ä—Å–∏–Ω–≥ - FAILED: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è ModuleNotFoundError: No module named 'cgi'")
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print("=" * 70)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("News Scraper", test_news_scraper),
        ("RSS –ü–∞—Ä—Å–∏–Ω–≥", test_rss_parsing),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - PASSED")
            else:
                print(f"‚ùå {test_name} - FAILED")
        except Exception as e:
            print(f"‚ùå {test_name} - FAILED: {e}")
    
    print("=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)